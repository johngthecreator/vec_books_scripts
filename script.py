#%%
import json
import sqlite3
import sqlite_vec
import polars as pl

from typing import List
import struct


def serialize_f32(vector: List[float]) -> bytes:
    """serializes a list of floats into a compact "raw bytes" format"""
    return struct.pack("%sf" % len(vector), *vector)


db = sqlite3.connect("./vec_books.sqlite")
db.enable_load_extension(True)
sqlite_vec.load(db)
db.enable_load_extension(False)

sqlite_version, vec_version = db.execute(
    "select sqlite_version(), vec_version()"
).fetchone()
print(f"sqlite_version={sqlite_version}, vec_version={vec_version}")

#%%
df = pl.read_csv("./1000_books.csv")

#%%
# for exploring purposes only
for item in df.iter_rows():
    print(len(json.loads(item[-1])))


#%%
db.execute("""
    CREATE VIRTUAL TABLE IF NOT EXISTS book_vectors USING vec0(
    vec_desc float[384]
);
""")

db.execute("""
    CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY,
        isbn TEXT,
        title TEXT,
        desc TEXT,
        genres TEXT,
        author TEXT,
        link TEXT,
        vector_id INTEGER
    );
""")
#%%

#%%

with db:
    for item in df.iter_rows():
        ser_vec = serialize_f32(json.loads(item[-1]))
        cursor = db.cursor()
        cursor.execute("INSERT INTO book_vectors(vec_desc) VALUES (?)", (ser_vec,))

        vector_id = cursor.lastrowid

        cursor.execute(
            "INSERT INTO books (isbn, title, desc, genres, author, link, vector_id) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (item[0], item[1], item[2], item[3], item[4], "https://google.com", vector_id, )
        )

#%%

#query_unembedded = "I like books about animals on a farm and pigs being rulers"

query = [-1.95437483e-03, -6.92131137e-03, -1.72733832e-02,  2.06289086e-02,
       -7.33731315e-02, -3.21532004e-02, -2.77532116e-02, -2.59219073e-02,
        6.36341050e-02,  1.03418626e-01,  7.55564775e-03,  5.08408397e-02,
       -1.44435177e-02,  2.99157022e-04, -4.24968638e-02, -4.83682472e-03,
       -2.09312402e-02,  2.20162589e-02,  3.83227691e-02, -8.47974345e-02,
       -5.04036918e-02,  4.42221314e-02,  1.82002578e-02, -4.09600703e-04,
       -3.82565334e-02, -7.22934008e-02, -1.34371379e-02, -3.10298689e-02,
       -4.55811247e-02, -7.45506585e-02, -1.08630255e-01, -1.00498041e-02,
       -2.34419722e-02, -6.65653348e-02, -6.44369721e-02,  2.97392551e-02,
        1.11855842e-01, -4.69963718e-03,  1.26349702e-01,  3.33106220e-02,
        4.93632928e-02, -2.25747693e-02,  6.03107773e-02,  3.93331004e-03,
        3.34414728e-02,  3.66246961e-02, -4.69814660e-03, -1.20601691e-02,
        6.96181431e-02,  3.59690599e-02, -1.13886893e-02,  2.92323586e-02,
       -7.47786090e-02, -5.46740331e-02,  1.38448747e-02, -1.05507709e-02,
       -8.42962787e-02,  2.75013801e-02,  3.06176562e-02, -1.13012210e-01,
        4.91864793e-03, -1.94965284e-02, -4.57537994e-02,  1.72717068e-02,
       -2.57132836e-02,  2.80374289e-02,  5.56886615e-03,  1.00067504e-01,
       -4.48267534e-02, -5.27501106e-02, -5.21360859e-02, -2.84042265e-02,
        8.03466737e-02,  2.04173122e-02, -1.24759004e-02, -2.48074234e-02,
       -5.37267104e-02, -8.35678503e-02,  1.72396656e-02, -5.27075417e-02,
       -8.11688676e-02, -3.96324098e-02,  3.59172910e-03, -5.48545159e-02,
       -8.37162789e-03, -4.02186923e-02,  7.65705202e-03, -2.05824487e-02,
        6.73447549e-03, -2.21715216e-02,  7.15574920e-02, -8.87470022e-02,
        6.57790750e-02,  9.63532254e-02,  2.88151251e-03,  3.57830152e-02,
        1.59769487e-02,  5.89671824e-03, -2.42096893e-02,  6.62741587e-02,
       -4.47569042e-02, -8.48236773e-03,  4.49797325e-02,  4.49320748e-02,
        3.92471962e-02, -3.73244211e-02, -8.58343989e-02, -1.67399533e-02,
       -1.37313094e-04, -4.21145931e-02, -7.90478736e-02,  3.83047909e-02,
       -4.87210378e-02,  6.09676987e-02,  8.11533108e-02,  6.06482998e-02,
        1.23604655e-01, -4.30998887e-04,  6.79456592e-02, -2.18510125e-02,
        3.76003236e-02,  4.57038321e-02, -3.02735195e-02, -1.17576038e-02,
        2.08969377e-02, -1.53543148e-02,  3.95397469e-02, -2.34931381e-33,
       -7.79972645e-03, -4.63347510e-02, -4.46197167e-02,  1.07753957e-02,
        6.73514083e-02, -4.94086696e-03,  4.74901237e-02, -1.75117608e-02,
        6.61752711e-04,  2.15026475e-02, -3.97242373e-03,  9.16448236e-02,
       -4.82260175e-02, -1.29747549e-02, -4.21943963e-02,  1.12921197e-03,
        1.21560544e-02, -2.87896991e-02,  4.15638275e-02, -1.04950583e-02,
       -5.66340834e-02, -1.37747424e-02,  2.48982813e-02,  2.99176332e-02,
        8.59650075e-02, -5.98857701e-02,  1.19425990e-02, -1.19351588e-01,
        4.87451628e-02,  2.82623488e-02,  5.28152846e-02, -7.85971135e-02,
       -2.97928024e-02, -1.15851492e-01, -4.59313393e-02, -1.67440623e-02,
       -4.45206389e-02, -7.37494156e-02,  1.17214173e-01,  3.32666114e-02,
        8.65052920e-03, -4.86088730e-02,  7.72529617e-02,  1.05227437e-02,
        1.49568515e-02,  9.41911265e-02,  5.08846156e-02,  1.80558283e-02,
       -3.24123306e-03, -6.87100645e-03, -5.10006733e-02, -7.63858184e-02,
       -1.88452005e-02, -1.84881929e-02,  3.55824009e-02, -4.92109098e-02,
       -2.85118334e-02,  7.63905793e-02, -4.28533293e-02, -7.27498857e-03,
        3.78559344e-03,  8.66158456e-02,  4.84596826e-02, -2.32347492e-02,
        3.83507311e-02, -2.61853468e-02, -9.98190269e-02,  6.58588335e-02,
       -6.94532320e-02, -5.66233024e-02, -4.06122245e-02,  4.11564335e-02,
        3.28231677e-02, -6.04653992e-02, -8.39933679e-02,  3.05793379e-02,
        4.99382839e-02, -5.46119288e-02, -9.26410928e-02, -1.14539891e-01,
        4.14259806e-02,  1.77212972e-02, -1.07520923e-03,  3.99874011e-03,
       -2.05762703e-02,  3.99511755e-02,  5.40696383e-02, -1.03193589e-01,
        4.59394418e-02, -8.29562023e-02, -4.88863047e-03, -8.86666588e-03,
        9.64908954e-03, -7.10830912e-02, -1.83770116e-02,  1.90057986e-33,
       -3.90610397e-02, -1.14042401e-01, -7.00706989e-03,  5.55711463e-02,
       -1.34923086e-02,  3.28308307e-02, -3.09904777e-02,  8.47759843e-03,
       -2.30020937e-02, -6.75482005e-02, -1.24856241e-01, -1.19726860e-03,
       -9.55390278e-03,  4.96750623e-02,  3.09778526e-02, -9.82355177e-02,
       -2.62438841e-02, -6.98664933e-02,  1.02306157e-02, -3.91501933e-02,
       -1.16881162e-01,  9.55152586e-02, -2.89867595e-02, -1.68161634e-02,
        8.01066458e-02,  1.06357904e-02, -1.38498232e-01,  3.55431985e-04,
       -4.82479446e-02,  1.25961890e-02,  3.33054177e-02,  2.65729474e-03,
        1.54558374e-02, -3.47607434e-02, -5.68918884e-02, -2.24321596e-02,
        3.66855860e-02, -7.21928552e-02,  9.20714717e-03, -1.72800962e-02,
        4.07975316e-02, -3.45216468e-02,  1.72914583e-02, -4.08712924e-02,
       -5.63664995e-02,  5.73872365e-02,  4.76185530e-02,  5.62183969e-02,
        4.12092684e-03,  2.98932921e-02,  1.42724542e-02,  4.82294634e-02,
        5.24322502e-02, -8.48223343e-02,  3.20080817e-02,  6.39618635e-02,
        6.17192574e-02, -1.89768709e-02,  6.67326748e-02,  2.97863744e-02,
       -6.67583048e-02,  5.57426848e-02, -2.41780449e-02,  1.18680723e-01,
       -8.10133517e-02, -6.42041191e-02, -3.14429849e-02, -2.77941469e-02,
        9.35949981e-02, -2.46203840e-02, -5.08375950e-02, -1.68792661e-02,
       -4.80771922e-02, -1.37429861e-02, -2.23462321e-02,  1.11915849e-01,
        9.36278924e-02,  2.56610308e-02,  3.04693803e-02, -5.18217636e-03,
        2.52187327e-02, -1.19530912e-02, -1.86430279e-03,  6.15950935e-02,
        5.15699238e-02,  5.99819124e-02,  2.77806632e-02,  8.56427625e-02,
        4.19024564e-02, -4.23027761e-02,  3.54658291e-02, -5.36377169e-02,
        4.97466326e-02,  2.85186432e-02,  7.63180628e-02, -1.72219501e-08,
       -3.81222293e-02, -1.20836990e-02,  5.65822050e-02, -2.58713122e-02,
        4.18900559e-03,  2.80075464e-02,  3.15242559e-02, -5.78162959e-03,
       -4.71772105e-02,  4.65569943e-02, -2.65868995e-02, -1.76378954e-02,
       -1.59107556e-03,  1.38003612e-02,  1.66291818e-02,  1.28641734e-02,
        1.74952284e-01, -9.45206508e-02,  9.89109743e-04,  2.21304987e-02,
        2.85417866e-02,  3.63618806e-02,  2.17412580e-02, -4.74877059e-02,
        1.19713703e-02,  4.59057577e-02,  1.30969435e-02, -4.97415513e-02,
        7.03039244e-02,  9.72709358e-02, -1.52748730e-03,  6.77222759e-02,
        2.44822986e-02, -1.79735236e-02,  4.95717749e-02,  2.47298572e-02,
       -3.47573757e-02,  3.88788083e-03,  1.90326478e-02, -1.43517917e-02,
        4.94695865e-02,  4.87886444e-02,  7.00954422e-02,  1.93246584e-02,
        3.67223844e-03, -1.84974894e-02,  9.53269228e-02, -8.60008935e-04,
        7.95580968e-02,  6.95659034e-03, -2.58172546e-02,  4.20348309e-02,
        1.10437840e-01, -3.20979729e-02,  3.02737560e-02, -5.56099229e-03,
       -5.54233976e-02,  1.31068751e-02, -5.23013249e-03,  6.28147973e-05,
        8.33263844e-02, -2.35236511e-02, -4.16290835e-02, -8.45454540e-03]

rows = cursor.execute(
    """
      SELECT
        rowid,
        distance
      FROM book_vectors
      WHERE vec_desc MATCH ?
      ORDER BY distance
      LIMIT 3
    """,
    (serialize_f32(query),),
).fetchall()

print(rows)
# %%
